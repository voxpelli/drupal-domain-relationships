<?php
// $Id: domain_relationships.install,v 1.1.2.1 2009/09/28 18:43:44 nonsie Exp $

/**
 * @file
 * Alters domain table to accommodate relationships between domains
 */

/**
 * Implementation of hook_schema_alter().
 *
 * @param $schema
 *   The system-wide schema
 */
function domain_relationships_schema_alter(&$schema) {
  $schema_changes = _domain_relationships_get_fields();
  $schema = array_merge_recursive($schema, $schema_changes);
}

/**
 * Implementation of hook_install().
 */
function domain_relationships_install() {
  $ret = array();
  $schema = _domain_relationships_get_fields();
  foreach ($schema as $table => $properties) {
    foreach ($properties['fields'] as $name => $field) {
      db_add_field($ret, $table, $name, $field);
    }
  }
}

/**
 * Implementation of hook_uninstall().
 */
function domain_relationships_uninstall() {
  $schema = _domain_relationships_get_fields();
  foreach ($schema as $table => $properties) {
    foreach ($properties['fields'] as $name => $field) {
      db_drop_field($ret, $table, $name);
    }
  }
}

function _domain_relationships_get_fields() {
  $schema = array();
  $schema['domain']['fields']['parent'] = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => -1,
    'description' => t('The parent id of this domain, -1 indicating no parent.')
  );
  return $schema;
}

function domain_relationships_update_6101() {
  $ret = array();
  // Set default domain parent to none
  $ret[] = update_sql("UPDATE {domain} SET parent = -1 WHERE domain_id = 0");
  // Clean up earlier version of the module that used an additional column
  if (db_column_exists('domain', 'sloc')) {
    db_drop_field($ret, 'domain', 'sloc');
  }
  return $ret;
}