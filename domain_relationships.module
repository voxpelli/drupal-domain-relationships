<?php
// $Id: domain_relationships.module,v 1.1 2009/08/29 00:40:59 nonsie Exp $

/**
 * @file
 * domain_relationships.module
 * Primarily Drupal hooks to manipulate domain relationships
 */

/**
 * Implementation of hook_help().
 * Display help and module information
 * @param $path
 *   path which path of the site we're displaying help
 * @param $arg
 *   array that holds the current path as would be returned from arg() function
 * @return
 *   help text for the path
 */
function domain_relationships_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#domain_relationships":
      $output = '<p>'.  t("Adds relationships for domains") .'</p>';
      break;
  }
  return $output;
}


/**
 * Implementation of hook_form_alter().
 */
function domain_relationships_form_alter(&$form, $form_state, $form_id) {
  if (preg_match('|_node_form|', $form_id)) {
    domain_relationships_show_domain_hierarchy($form, 'domain', 'domains');
  }
  else {
    switch ($form_id) {
      // Handle relationships between domains on domain form
      case 'domain_form':
        $domain_list = domain_relationships_all_active_domains();
        $domain_list[-1] = t('None');
        $default_parent = -1;
        if (!empty($form['domain_id']['#value'])) {
          unset($domain_list[$form['domain_id']['#value']]);
          $default_parent = domain_relationships_domain_parent($form['domain_id']['#value']);
        }
        $form['domain']['parent'] = array(
          '#type' => 'select',
          '#title' => t('Domain parent'),
          '#description' => t('Domain from which this domain can inherit content from.'),
          '#default_value' => $default_parent,
          '#options' => $domain_list,
          '#required' => TRUE,
          '#weight' => 0
        );
        $form['#submit'][] = 'domain_relationships_domain_form_submit';
        break;
      case 'block_admin_configure':
      case 'block_box_form':
      case 'block_add_block_form':
        if (module_exists('domain_blocks')) {
          $tree_options = domain_relationships_options_list();
          $form['domain_vis_settings']['domain_blocks']['#options'] = $tree_options;
        }
        break;
      // Displays domains in correct order on the user edit form
      case 'user_profile_form':
        domain_relationships_show_domain_hierarchy($form, 'domain_user_default', 'default_domain');
        break;
    }
  }
}

/**
 * Implementation of hook_domainupdate().
 */
function domain_relationships_domainupdate($op, $domain, $edit = array()) {
  switch ($op) {
    case 'delete':
      _domain_relationships_set_default_parent($domain);
      break;
  }
}

/**
 * Overwrite the default list of checkbox options for domains with ordered
 * and indented list based on the domain hierarchy.
 */
function domain_relationships_show_domain_hierarchy(&$form, $form_element, $form_element_selected) {
  $element = $form[$form_element][$form_element_selected];
  // Loop through the original form to determine the domains this user has access to
  if (is_array($element['#options'])) {
    $allowed_domains = array();
    foreach ($element['#options'] as $allowed_option_key => $allowed_option_value) {
      $allowed_domains[] = $allowed_option_key;
    }
    $tree = _domain_relationships_tree();
    $tree = _domain_relationships_tree_set_valid($tree, $allowed_domains);
    $options = _domain_relationships_options_list_indent($tree, TRUE);
    $form[$form_element][$form_element_selected]['#options'] = $options;
  }
}

/**
 * Submit handler for domain form
 */
function domain_relationships_domain_form_submit($form, $form_state) {
  $domain_parent = $form_state['values']['parent'];

  if ($domain_parent == -1) {
    $domain_parent = NULL;
  }

  // Updating an existing domain or inserting a new record
  if (!empty($form_state['values']['domain_id'])) {
    $domain_id = $form_state['values']['domain_id'];
    $values = array($domain_id);

    // If there is a record for current domain in the DB update its records, otherwise attempt to create it
    $check = db_result(db_query("SELECT COUNT(domain_id) FROM {domain} WHERE domain_id = %d", $values));
    if ($domain_parent === NULL) {
      if ($check > 0) {
        $sql = "UPDATE {domain} SET parent = NULL WHERE domain_id = %d";
      }
      else {
        $sql = "INSERT INTO {domain} (domain_id) VALUES (%d)";
      }
    }
    else {
      array_unshift($values, $domain_parent);
      if ($check > 0) {
        $sql = "UPDATE {domain} SET parent = %d WHERE domain_id = %d";
      }
      else {
        $sql = "INSERT INTO {domain} (parent, domain_id) VALUES (%d, %d)";
      }
    }
    db_query($sql, $values);
  }
  elseif ($domain_parent !== NULL) {
    //TODO: What is happening here?
    $created_domain = db_result(db_query("SELECT domain_id FROM {domain} WHERE subdomain = '%s'", $form_state['values']['subdomain']));
    if ($created_domain) {
      db_query("UPDATE {domain} SET parent = %d WHERE domain_id = %d", $domain_parent, $created_domain);
    }
  }
  cache_clear_all('domain_relationships_tree', 'cache');
}

/**
 * Calculate a tree based on parent and alphabetical order
 */
function _domain_relationships_tree($rebuild = FALSE) {
  static $tree;

  if (empty($tree) && !$rebuild) {
    $tree = cache_get('domain_relationships_tree', 'cache');
    if (!empty($tree)) {
      $tree = $tree->data;
    }
  }
  if (empty($tree) || $rebuild) {
    $where = $only_valid ? 'WHERE valid = 1' : '';
    $result = db_query("SELECT domain_id, sitename, valid, parent FROM {domain} $where ORDER BY sitename ASC");

    // Capture in an array of objects for ease of processing.
    $domains = array();
    while ($data = db_fetch_object($result)) {
      $domains[$data->domain_id] = array(
        'name' => $data->sitename,
        'valid' => $data->valid,
        'parent' => $data->parent,
      );
    }

    $tree = _domain_relationships_tree_construct($domains);
    cache_set('domain_relationships_tree', $tree, 'cache');
  }
  return $tree;
}

/**
 * Construct a tree based on an array of id:s and parents
 */
function _domain_relationships_tree_construct($src) {
  $tree = array();
  $lookuparray = array();
  foreach ($src as $key => $values) {
    $lookuparray[$key] = $values;
    $lookuparray[$key]['children'] = array();
    unset($lookuparray[$key]['parent']);
  }
  foreach ($src as $key => $values) {
    $parent = $values['parent'];
    //TODO: NULL and -1?
    if ($parent === NULL) {
      $tree[$key] = &$lookuparray[$key];
    }
    elseif (array_key_exists($parent, $lookuparray)) {
      $lookuparray[$parent]['children'][$key] = &$lookuparray[$key];
    }
  }
  return $tree;
}

function _domain_relationships_tree_set_valid($tree, $valid) {
  foreach ($tree as $key => $value) {
    $tree[$key]['valid'] = in_array($key == 0 ? -1 : $key, $valid);
    $tree[$key]['children'] = _domain_relationships_tree_set_valid($tree[$key]['children'], $valid);
  }
  return $tree;
}

/**
 * Return all active and valid domains that can possibly be parents
 * to other domains and a placeholder for no domain parent.
 *
 * @return
 *   array
 */
function domain_relationships_all_active_domains() {
  $domains = domain_domains();
  foreach ($domains as $domain) {
    $active_domains[$domain['domain_id']] = theme('domain_relationships_domain_select_list', $domain);
  }
  return $active_domains;
}

function domain_relationships_domain_parent($domain_id) {
  $parent_id = db_result(db_query("SELECT parent FROM {domain} WHERE domain_id = %d", $domain_id));
  if (!$parent_id) {
    $parent_id = -1;
  }
  return $parent_id;
}

/**
 * Lookup function to locate all children of a given domain
 *
 * @param $domain_id
 *   int domain id
 * @return
 *   array
 */
function domain_relationships_domain_children($domain_id) {
  //TODO: This function is broken!!
  $children = db_fetch_array(db_query("SELECT domain_id FROM {domain} WHERE parent = %d", $domain_id));
  return $children;
}

/**
 * Assign all children of a given domain to default domain
 *
 * @param $domain_id
 *   int domain id
 * @return
 *   array
 */
function _domain_relationships_set_default_parent($domain_id) {
  $children = domain_relationships_domain_children($domain_id);
  if (!empty($children)) {
    $placeholders = db_placeholders($children);
    db_query("UPDATE {domain} SET parent = %d WHERE domain_id IN ($placeholders)", 0, $children);
  }
}

/**
 * Retrieve a list of indented domains
 *
 * @param $valid
 *   boolean whether to only include active domains - all child domans to an inactive domain will then be excluded
 * @return
 *   array
 */
function domain_relationships_options_list($valid = FALSE) {
  $tree = _domain_relationships_tree();
  $options = _domain_relationships_options_list_indent($tree, $valid);
  return $options;
}

/**
 * Recursive function that indents the domains and makes the array into a single dimension
 *
 * @param $tree
 *   array the domain tree
 * @param $valid
 *   boolean whether to only include active domains - all child domans to an inactive domain will then be excluded
 * @param $indent
 *   int how much to indent the current level - increased one for each recursion
 * @return
 *   array
 */
function _domain_relationships_options_list_indent($tree, $valid = FALSE, $indent = 0) {
  $indented = array();

  foreach ($tree as $key => $values) {
    if ($valid === FALSE || !empty($values['valid'])) {
      if ($key == 0) {
        $key = -1;
      }
      $indented[$key] = str_repeat('&nbsp;', $indent * 3) . $values['name'];
      $children = _domain_relationships_options_list_indent($values['children'], $valid, $indent + 1);
      foreach ($children as $sub_key => $sub_value) {
        $indented[$sub_key] = $sub_value;
      }
    }
  }

  return $indented;
}

/** Theming functions **/

/**
 * Implementation of hook_theme().
 *
 */
function domain_relationships_theme() {
  return array(
    'domain_relationships_domain_select_list' => array(
      'arguments' => array('domain' => NULL),
    ),
    'domain_relationships_domain_checkbox' => array(
      'arguments' => array('form' => NULL),
    )
  );
}

/**
 * Theme individual domain listing used in select elements
 */
function theme_domain_relationships_domain_select_list($domain) {
  return $domain['sitename'] .' - '. $domain['subdomain'];
}

/**
 * Theme individual checkboxes used in checkbox-lists
 */
function theme_domain_relationships_domain_checkbox($element) {
  $element['#title'] = str_repeat('&nbsp;', $element['#indent'] * 3) . $element['#title'];
  $output = theme('checkbox', $element);
  return $output;

}